# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.python':
  'Check CLI output':
    'prefix': 'checkoutput'
    'body': """
      cli = [
        "whoami",
      ]

      try:
        check_output(cli)

      except Exception as e:
        raise Exception(e)
    """

  'Argument parser':
    'prefix': 'argparser'
    'body': """
      parser = ArgumentParser()
      parser.add_argument('--thing1', help='Description for this arg', required=True)
      parser.add_argument('--thing2', help='Description for this arg', required=False)
      args = parser.parse_args()
    """

  'Logging':
    'prefix': 'logging'
    'body': """
      logger = logging.getLogger('apply-cost-tags')
      logger.setLevel(logging.DEBUG)
      # fh = logging.FileHandler('output.log')
      # fh.setLevel(logging.DEBUG)
      formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
      # fh.setFormatter(formatter)
      # logger.addHandler(fh)
      ch = logging.StreamHandler()
      ch.setLevel(logging.DEBUG)
      ch.setFormatter(formatter)
      logger.addHandler(ch)
    """

  'sqlalchemy setup':
    'prefix': 'sqlalchemy'
    'body': """
      #!/usr/bin/python

      from sqlalchemy import func, Column, Integer, String, DateTime, ForeignKey
      from sqlalchemy.ext.declarative import declarative_base
      from sqlalchemy.orm import relationship

      class DatabaseRow(object):
          id = Column(Integer, primary_key=True)
          date_created = Column(DateTime, default=func.current_timestamp())
          date_modified = Column(DateTime, default=func.current_timestamp(), onupdate=func.current_timestamp())
          title = Column(String(480))
          url = Column(String(480))

          def update(self, session):
              session.commit()

          def __init__(self, title, url):
              self.title = title
              self.url = url

          def __repr__(self):
              return "<DatabaseRow title={}, url={}}".format(self.title, self.url)

      Base = declarative_base(cls=DatabaseRow)

      class Parent(Base):
          __tablename__ = "parent"

          active = Column(Integer, default=1)
          children = relationship('Child')

          def __repr__(self):
              return "<Parent title={}}".format(self.title)

      class Child(Base):
          __tablename__ = "child"

          text = Column(String(360))

          parent_id = Column(Integer, ForeignKey('parent.id'))

          def __init__(self, title, url, text):
              self.title = title
              self.url = url
              self.text = text

          def __repr__(self):
              return "<Child title={}".format(self.title)
    """
